stages:
  - buildartifacts
  - build
  - test

image: ${CI_REGISTRY}/khassel/container/kaniko:latest

variables:
  GIT_DEPTH: 1
  MAGICMIRROR_VERSION: "v2.18.0"
  NODE_VERSION_MASTER: "16"
  NODE_VERSION_DEVELOP: "17"
  DEBIAN_VERSION: "bullseye"
  DEBIAN_VERSION_ARM: "buster"
  GitRepo: "https://github.com/MichMich/MagicMirror.git"

.rule:
  rules:
  - if: $TASK == "runtime"

.beforescript:
  before_script:
    - docker.gitlab.login
    - | 
      # set build arch
      if [ "${imgarch}" = "arm" ]; then
        export buildarch="arm32v7/"
        export DEBIAN_VERSION=${DEBIAN_VERSION_ARM}
      elif [ "${imgarch}" = "arm64" ]; then
        export buildarch="arm64v8/"
      elif [ "${imgarch}" = "debug" ]; then
        export debug="true"
      elif [ ! "${imgarch}" = "amd64" ]; then
        echo "unsupported image arch: ${imgarch}"
      fi
      # master or not
      if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
        BuilderTag=${MAGICMIRROR_VERSION}
        export NODE_VERSION=${NODE_VERSION_MASTER}
      else
        BuilderTag=${CI_COMMIT_BRANCH}
        export NODE_VERSION=${NODE_VERSION_DEVELOP}
      fi
      export BUILDER_IMG="${CI_REGISTRY_IMAGE}:${BuilderTag}_${imgarch}_artifacts"
      export GIT_INFO="commit=${CI_COMMIT_SHORT_SHA} ref=${CI_COMMIT_REF_NAME} date=${CI_COMMIT_TIMESTAMP} author=${CI_COMMIT_AUTHOR} title=${CI_COMMIT_TITLE}"
  after_script:
    - docker.logout

build_artifacts:
  stage: buildartifacts
  script:
  - |
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      echo "CI_COMMIT_BRANCH is master"
      BuildRef="${MAGICMIRROR_VERSION}"
    else
      echo "CI_COMMIT_BRANCH is not master"
      BuildRef="develop"
    fi
    set | grep -E "BUILDER_IMG=|NODE_VERSION=|buildarch=|BuildRef=|GitRepo="
    if [ "$(skopeo inspect docker://${BUILDER_IMG})" ] && [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      echo "no builder image rebuild"
      exit 0
    fi
    echo "builder image (re)build"
    build --context "./build" \
    --dockerfile "Dockerfile-artifacts" \
    --destination "${BUILDER_IMG}" \
    --build-arg NODE_VERSION="${NODE_VERSION}" \
    --build-arg DEBIAN_VERSION="${DEBIAN_VERSION}" \
    --build-arg GIT_INFO="${GIT_INFO}" \
    --build-arg buildarch="${buildarch}" \
    --build-arg BuildRef="${BuildRef}" \
    --build-arg GitRepo="${GitRepo}" \
    --build-arg debug="${debug}"
  extends: 
  - .beforescript
  - .rule
  parallel:
    matrix:
      - imgarch: ["amd64", "arm", "arm64", "debug"]

.runtime:
  stage: build
  script:
  - |
    if [ -z "${SLIM}" ]; then
      export FAT="_fat"
      export DEFAULT_TAG="fat"
    else
      export DEFAULT_TAG="latest"
    fi
    [ -z "${debug}" ] && export NODE_ENV="production" || export NODE_ENV="test"
    set | grep -E "BUILDER_IMG=|NODE_VERSION=|buildarch=|FAT"
    build --context "./build" \
      --dockerfile "Dockerfile-debian" \
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}${FAT}_${imgarch}" \
      --build-arg NODE_VERSION="${NODE_VERSION}" \
      --build-arg DEBIAN_VERSION="${DEBIAN_VERSION}" \
      --build-arg GIT_INFO="${GIT_INFO}" \
      --build-arg buildarch="${buildarch}" \
      --build-arg BUILDER_IMG="${BUILDER_IMG}" \
      --build-arg SLIM="${SLIM}" \
      --build-arg NODE_ENV="${NODE_ENV}"

    [ -z "${debug}" ] || exit 0

    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      docker.manifest "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}${FAT}" "${DEFAULT_TAG}"
      docker.manifest "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}${FAT}" "${MAGICMIRROR_VERSION}${FAT}"
      docker.sync "${CI_REGISTRY_IMAGE}:${DEFAULT_TAG} ${CI_REGISTRY_IMAGE}:${MAGICMIRROR_VERSION}${FAT}"
    else
      docker.manifest "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}${FAT}" "${CI_COMMIT_BRANCH}${FAT}"
      docker.sync "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}${FAT}"
    fi
  extends: 
  - .beforescript
  - .rule

build_amd64:
  variables:
    imgarch: "amd64"
    SLIM: "-slim"
  needs: ["build_artifacts: [amd64]"]
  extends: .runtime

build_amd64_fat:
  variables:
    imgarch: "amd64"
  needs: ["build_artifacts: [amd64]"]
  extends: .runtime

build_arm:
  variables:
    imgarch: "arm"
    SLIM: "-slim"
  needs: ["build_artifacts: [arm]"]
  extends: .runtime

build_arm_fat:
  variables:
    imgarch: "arm"
  needs: ["build_artifacts: [arm]"]
  extends: .runtime

build_arm64:
  variables:
    imgarch: "arm64"
    SLIM: "-slim"
  needs: ["build_artifacts: [arm64]"]
  extends: .runtime

build_arm64_fat:
  variables:
    imgarch: "arm64"
  needs: ["build_artifacts: [arm64]"]
  extends: .runtime

build_debug:
  variables:
    imgarch: "debug"
    SLIM: "-slim"
  needs: ["build_artifacts: [debug]"]
  extends: .runtime

build_alpine:
  needs: ["build_artifacts: [amd64]"]
  variables:
    imgarch: "amd64"
  stage: build
  script:
  - |
    set | grep -E "BUILDER_IMG=|NODE_VERSION="
    dest="--destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_alpine"
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      dest="${dest} --destination ${CI_REGISTRY_IMAGE}:alpine"
    fi
    build --context "./build" \
      --dockerfile "Dockerfile-alpine" \
      ${dest} \
      --build-arg NODE_VERSION="${NODE_VERSION}" \
      --build-arg GIT_INFO="${GIT_INFO}" \
      --build-arg BUILDER_IMG="${BUILDER_IMG}"
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      docker.sync "${CI_REGISTRY_IMAGE}:alpine"
    else
      docker.sync "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_alpine"
    fi
  extends: 
  - .beforescript
  - .rule

test_alpine:
  stage: test
  needs: ["build_alpine"]
  variables:
    GIT_STRATEGY: none
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_alpine
    entrypoint: [""]
  script:
  - |
    cd /opt/magic_mirror
    git log -1 > /tmp/image.txt
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      echo "CI_COMMIT_BRANCH is master"
      BuildRef="${MAGICMIRROR_VERSION}"
    else
      echo "CI_COMMIT_BRANCH is not master"
      BuildRef="develop"
    fi
    cd /tmp
    git clone --depth 1 -b "${BuildRef}" --single-branch "${GitRepo}" mm
    cd mm
    git log -1 > /tmp/clone.txt
    cat /tmp/image.txt
    echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    cat /tmp/clone.txt
    echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    diff /tmp/image.txt /tmp/clone.txt
    echo "no diffs detected."
  extends: .rule

# test raspi-image with gpio support and python
build_gpio:
  stage: build
  variables:
    imgarch: "arm"
  script:
  - |
    docker.gitlab.login
    build --context "./build" \
      --dockerfile "Dockerfile-gpio" \
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_gpio" \
      --build-arg BASE_IMG="${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_arm"
  rules:
  - if: $TASK == "gpio"

test_debug:
  stage: test
  needs: ["build_debug"]
  variables:
    GIT_STRATEGY: none
    StartEnv: test
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug
    entrypoint: [""]
  script:
  - /opt/magic_mirror/entrypoint.sh
  extends: .rule

snyk_amd64:
  stage: test
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_amd64
    entrypoint: [""]
  script:
  - sudo npm install -g snyk snyk-to-html npm-check-updates
  - snyk auth ${SNYK_TOKEN}
  - cd /opt/magic_mirror
  - snyk test --json | snyk-to-html -o ${CI_PROJECT_DIR}/snyk_results.html || true
  - ncu
  rules:
  - if: $TASK == "snyk"
  artifacts:
    when: always
    paths: 
      - snyk_results.html

pages:
  stage: build
  needs: []
  image: ${CI_REGISTRY}/khassel/jekyll:latest
  script:
    - cp -v .gitlab-ci.yml ${CI_PROJECT_DIR}/pages/_data/gitlab.yml
    - uglify.sh ${CI_PROJECT_DIR}/pages/assets/js
    - cd pages
    - cp -v $HOME/Gemfile .
    - bundle exec jekyll build -d ${CI_PROJECT_DIR}/public
  artifacts:
    paths:
      - public
  rules:
  - if: ($CI_COMMIT_BRANCH == "master" && $TASK == "runtime") || ($TASK == "pages")
